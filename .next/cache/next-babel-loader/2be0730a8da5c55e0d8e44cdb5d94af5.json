{"ast":null,"code":"var _jsxFileName = \"/Users/michaelpryor/Desktop/projects/giphtionary/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Provider } from 'next-auth/client';\nimport './styles.css'; // Use the <Provider> to improve performance and allow components that call\n// `useSession()` anywhere in your application to access the `session` object.\n\nexport default function App({\n  Component,\n  pageProps\n}) {\n  return __jsx(Provider // Provider options are not required but can be useful in situations where\n  // you have a short session maxAge time. Shown here with default values.\n  , {\n    options: {\n      // Client Max Age controls how often the useSession in the client should\n      // contact the server to sync the session state. Value in seconds.\n      // e.g.\n      // * 0  - Disabled (always use cache value)\n      // * 60 - Sync session state with server if it's older than 60 seconds\n      clientMaxAge: 0,\n      // Keep Alive tells windows / tabs that are signed in to keep sending\n      // a keep alive request (which extends the current session expiry) to\n      // prevent sessions in open windows from expiring. Value in seconds.\n      //\n      // Note: If a session has expired when keep alive is triggered, all open\n      // windows / tabs will be updated to reflect the user is signed out.\n      keepAlive: 0\n    },\n    session: pageProps.session,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  }, __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/michaelpryor/Desktop/projects/giphtionary/pages/_app.js"],"names":["Provider","App","Component","pageProps","clientMaxAge","keepAlive","session"],"mappings":";;;;;;AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,OAAO,cAAP,C,CAEA;AACA;;AACA,eAAe,SAASC,GAAT,CAAc;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAd,EAAwC;AACrD,SACE,MAAC,QAAD,CACE;AACA;AAFF;AAGE,IAAA,OAAO,EAAE;AACP;AACA;AACA;AACA;AACA;AACAC,MAAAA,YAAY,EAAE,CANP;AAOP;AACA;AACA;AACA;AACA;AACA;AACAC,MAAAA,SAAS,EAAE;AAbJ,KAHX;AAkBE,IAAA,OAAO,EAAEF,SAAS,CAACG,OAlBrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAmBE,MAAC,SAAD,eAAeH,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnBF,CADF;AAuBD","sourcesContent":["import { Provider } from 'next-auth/client'\nimport './styles.css'\n\n// Use the <Provider> to improve performance and allow components that call\n// `useSession()` anywhere in your application to access the `session` object.\nexport default function App ({ Component, pageProps }) {\n  return (\n    <Provider\n      // Provider options are not required but can be useful in situations where\n      // you have a short session maxAge time. Shown here with default values.\n      options={{\n        // Client Max Age controls how often the useSession in the client should\n        // contact the server to sync the session state. Value in seconds.\n        // e.g.\n        // * 0  - Disabled (always use cache value)\n        // * 60 - Sync session state with server if it's older than 60 seconds\n        clientMaxAge: 0,\n        // Keep Alive tells windows / tabs that are signed in to keep sending\n        // a keep alive request (which extends the current session expiry) to\n        // prevent sessions in open windows from expiring. Value in seconds.\n        //\n        // Note: If a session has expired when keep alive is triggered, all open\n        // windows / tabs will be updated to reflect the user is signed out.\n        keepAlive: 0\n      }}\n      session={pageProps.session} >\n      <Component {...pageProps} />\n    </Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}