{"ast":null,"code":"import { query as q } from 'faunadb';\nimport { serverClient, serializeFaunaCookie } from '../../utils/fauna-auth';\nexport default async function signuo(req, res) {\n  const {\n    email,\n    password\n  } = await req.body;\n\n  try {\n    if (!email || !password) {\n      throw new Error('Email and password must be provided.');\n    }\n\n    console.log(`email: ${email} trying to create user.`);\n    let user;\n\n    try {\n      user = await serverClient.query(q.Create(q.Collection('User'), {\n        credentials: {\n          password\n        },\n        data: {\n          email\n        }\n      }));\n    } catch (error) {\n      console.error('Fauna create user error:', error);\n      throw new Error('User already exists.');\n    }\n\n    if (!user.ref) {\n      throw new Error('No ref present in create query response.');\n    }\n\n    const loginRes = await serverClient.query(q.Login(user.ref, {\n      password\n    }));\n\n    if (!loginRes.secret) {\n      throw new Error('No secret present in login query response.');\n    }\n\n    const cookieSerialized = serializeFaunaCookie(loginRes.secret);\n    res.setHeader('Set-Cookie', cookieSerialized);\n    res.status(200).end();\n  } catch (error) {\n    res.status(400).send(error.message);\n  }\n}","map":{"version":3,"sources":["C:/Users/Mdp79/Desktop/projects/giphtionary/pages/api/signup.js"],"names":["query","q","serverClient","serializeFaunaCookie","signuo","req","res","email","password","body","Error","console","log","user","Create","Collection","credentials","data","error","ref","loginRes","Login","secret","cookieSerialized","setHeader","status","end","send","message"],"mappings":"AAAA,SAASA,KAAK,IAAIC,CAAlB,QAA2B,SAA3B;AACA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,wBAAnD;AAEA,eAAe,eAAeC,MAAf,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAC7C,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsB,MAAMH,GAAG,CAACI,IAAtC;;AAEA,MAAI;AACF,QAAI,CAACF,KAAD,IAAU,CAACC,QAAf,EAAyB;AACvB,YAAM,IAAIE,KAAJ,CAAU,sCAAV,CAAN;AACD;;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAa,UAASL,KAAM,yBAA5B;AAEA,QAAIM,IAAJ;;AAEA,QAAI;AACFA,MAAAA,IAAI,GAAG,MAAMX,YAAY,CAACF,KAAb,CACXC,CAAC,CAACa,MAAF,CAASb,CAAC,CAACc,UAAF,CAAa,MAAb,CAAT,EAA+B;AAC7BC,QAAAA,WAAW,EAAE;AAAER,UAAAA;AAAF,SADgB;AAE7BS,QAAAA,IAAI,EAAE;AAAEV,UAAAA;AAAF;AAFuB,OAA/B,CADW,CAAb;AAMD,KAPD,CAOE,OAAOW,KAAP,EAAc;AACdP,MAAAA,OAAO,CAACO,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;AACA,YAAM,IAAIR,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,QAAI,CAACG,IAAI,CAACM,GAAV,EAAe;AACb,YAAM,IAAIT,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAED,UAAMU,QAAQ,GAAG,MAAMlB,YAAY,CAACF,KAAb,CACrBC,CAAC,CAACoB,KAAF,CAAQR,IAAI,CAACM,GAAb,EAAkB;AAChBX,MAAAA;AADgB,KAAlB,CADqB,CAAvB;;AAMA,QAAI,CAACY,QAAQ,CAACE,MAAd,EAAsB;AACpB,YAAM,IAAIZ,KAAJ,CAAU,4CAAV,CAAN;AACD;;AAED,UAAMa,gBAAgB,GAAGpB,oBAAoB,CAACiB,QAAQ,CAACE,MAAV,CAA7C;AAEAhB,IAAAA,GAAG,CAACkB,SAAJ,CAAc,YAAd,EAA4BD,gBAA5B;AACAjB,IAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACD,GAtCD,CAsCE,OAAOR,KAAP,EAAc;AACdZ,IAAAA,GAAG,CAACmB,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqBT,KAAK,CAACU,OAA3B;AACD;AACF","sourcesContent":["import { query as q } from 'faunadb'\nimport { serverClient, serializeFaunaCookie } from '../../utils/fauna-auth'\n\nexport default async function signuo(req, res) {\n  const { email, password } = await req.body\n\n  try {\n    if (!email || !password) {\n      throw new Error('Email and password must be provided.')\n    }\n    console.log(`email: ${email} trying to create user.`)\n\n    let user\n\n    try {\n      user = await serverClient.query(\n        q.Create(q.Collection('User'), {\n          credentials: { password },\n          data: { email },\n        })\n      )\n    } catch (error) {\n      console.error('Fauna create user error:', error)\n      throw new Error('User already exists.')\n    }\n\n    if (!user.ref) {\n      throw new Error('No ref present in create query response.')\n    }\n\n    const loginRes = await serverClient.query(\n      q.Login(user.ref, {\n        password,\n      })\n    )\n\n    if (!loginRes.secret) {\n      throw new Error('No secret present in login query response.')\n    }\n\n    const cookieSerialized = serializeFaunaCookie(loginRes.secret)\n\n    res.setHeader('Set-Cookie', cookieSerialized)\n    res.status(200).end()\n  } catch (error) {\n    res.status(400).send(error.message)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}