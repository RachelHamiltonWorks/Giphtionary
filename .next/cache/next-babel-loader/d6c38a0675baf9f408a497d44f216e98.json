{"ast":null,"code":"import { query as q } from 'faunadb';\nimport { serverClient, serializeFaunaCookie } from '../../utils/fauna-auth';\nexport default async function login(req, res) {\n  const {\n    email,\n    password\n  } = await req.body;\n\n  try {\n    if (!email || !password) {\n      throw new Error('Email and password must be provided.');\n    }\n\n    const loginRes = await serverClient.query(q.Login(q.Match(q.Index('users_by_email'), email), {\n      password\n    }));\n\n    if (!loginRes.secret) {\n      throw new Error('No secret present in login query response.');\n    }\n\n    const cookieSerialized = serializeFaunaCookie(loginRes.secret);\n    res.setHeader('Set-Cookie', cookieSerialized);\n    res.status(200).end();\n  } catch (error) {\n    res.status(400).send(error.message);\n  }\n}","map":{"version":3,"sources":["C:/Users/Mdp79/Desktop/projects/giphtionary/pages/api/login.js"],"names":["query","q","serverClient","serializeFaunaCookie","login","req","res","email","password","body","Error","loginRes","Login","Match","Index","secret","cookieSerialized","setHeader","status","end","error","send","message"],"mappings":"AAAA,SAASA,KAAK,IAAIC,CAAlB,QAA2B,SAA3B;AACA,SAASC,YAAT,EAAuBC,oBAAvB,QAAmD,wBAAnD;AAEA,eAAe,eAAeC,KAAf,CAAqBC,GAArB,EAA0BC,GAA1B,EAA+B;AAC5C,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsB,MAAMH,GAAG,CAACI,IAAtC;;AAEA,MAAI;AACF,QAAI,CAACF,KAAD,IAAU,CAACC,QAAf,EAAyB;AACvB,YAAM,IAAIE,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,UAAMC,QAAQ,GAAG,MAAMT,YAAY,CAACF,KAAb,CACrBC,CAAC,CAACW,KAAF,CAAQX,CAAC,CAACY,KAAF,CAAQZ,CAAC,CAACa,KAAF,CAAQ,gBAAR,CAAR,EAAmCP,KAAnC,CAAR,EAAmD;AACjDC,MAAAA;AADiD,KAAnD,CADqB,CAAvB;;AAMA,QAAI,CAACG,QAAQ,CAACI,MAAd,EAAsB;AACpB,YAAM,IAAIL,KAAJ,CAAU,4CAAV,CAAN;AACD;;AAED,UAAMM,gBAAgB,GAAGb,oBAAoB,CAACQ,QAAQ,CAACI,MAAV,CAA7C;AAEAT,IAAAA,GAAG,CAACW,SAAJ,CAAc,YAAd,EAA4BD,gBAA5B;AACAV,IAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACD,GAnBD,CAmBE,OAAOC,KAAP,EAAc;AACdd,IAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqBD,KAAK,CAACE,OAA3B;AACD;AACF","sourcesContent":["import { query as q } from 'faunadb'\nimport { serverClient, serializeFaunaCookie } from '../../utils/fauna-auth'\n\nexport default async function login(req, res) {\n  const { email, password } = await req.body\n\n  try {\n    if (!email || !password) {\n      throw new Error('Email and password must be provided.')\n    }\n\n    const loginRes = await serverClient.query(\n      q.Login(q.Match(q.Index('users_by_email'), email), {\n        password,\n      })\n    )\n\n    if (!loginRes.secret) {\n      throw new Error('No secret present in login query response.')\n    }\n\n    const cookieSerialized = serializeFaunaCookie(loginRes.secret)\n\n    res.setHeader('Set-Cookie', cookieSerialized)\n    res.status(200).end()\n  } catch (error) {\n    res.status(400).send(error.message)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}