{"ast":null,"code":"import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\"; // For more information on each option (and a full list of options) go to\n// https://next-auth.js.org/configuration/options\n\nconst options = {\n  // https://next-auth.js.org/configuration/providers\n  providers: [Providers.Okta({\n    clientId: \"0oao8x9b6t2PxbapM4x6\",\n    clientSecret: \"00wl7S8zevJFI3tefK8l-yqVPrbXGYIjzBnSopM1k\",\n    domain: \"https://dev-421964.okta.com/oauth2/default\"\n  }), Providers.Apple({\n    clientId: process.env.APPLE_ID,\n    clientSecret: {\n      appleId: process.env.APPLE_ID,\n      teamId: process.env.APPLE_TEAM_ID,\n      privateKey: process.env.APPLE_PRIVATE_KEY,\n      keyId: process.env.APPLE_KEY_ID\n    }\n  }), Providers.Auth0({\n    clientId: process.env.AUTH0_ID,\n    clientSecret: process.env.AUTH0_SECRET,\n    domain: process.env.AUTH0_DOMAIN\n  }), Providers.Facebook({\n    clientId: process.env.FACEBOOK_ID,\n    clientSecret: process.env.FACEBOOK_SECRET\n  }), Providers.GitHub({\n    clientId: process.env.GITHUB_ID,\n    clientSecret: process.env.GITHUB_SECRET\n  }), Providers.Google({\n    clientId: process.env.GOOGLE_ID,\n    clientSecret: process.env.GOOGLE_SECRET\n  }), Providers.Twitter({\n    clientId: process.env.TWITTER_ID,\n    clientSecret: process.env.TWITTER_SECRET\n  })],\n  // Database optional. MySQL, Maria DB, Postgres and MongoDB are supported.\n  // https://next-auth.js.org/configuration/database\n  //\n  // Notes:\n  // * You must to install an appropriate node_module for your database\n  // * The Email provider requires a database (OAuth providers do not)\n  database: process.env.DATABASE_URL || \"mongodb+srv://MichaelP:Stringbean86@project3.fwi9o.mongodb.net/<dbname>?retryWrites=true&w=majority\",\n  // The secret should be set to a reasonably long random string.\n  // It is used to sign cookies and to sign and encrypt JSON Web Tokens, unless\n  // a seperate secret is defined explicitly for encrypting the JWT.\n  secret: process.env.SECRET,\n  session: {\n    // Use JSON Web Tokens for session instead of database sessions.\n    // This option can be used with or without a database for users/accounts.\n    // Note: `jwt` is automatically set to `true` if no database is specified.\n    jwt: true // Seconds - How long until an idle session expires and is no longer valid.\n    // maxAge: 30 * 24 * 60 * 60, // 30 days\n    // Seconds - Throttle how frequently to write to database to extend a session.\n    // Use it to limit write operations. Set to 0 to always update the database.\n    // Note: This option is ignored if using JSON Web Tokens\n    // updateAge: 24 * 60 * 60, // 24 hours\n\n  },\n  // JSON Web tokens are only used for sessions if the `jwt: true` session\n  // option is set - or by default if no database is specified.\n  // https://next-auth.js.org/configuration/options#jwt\n  jwt: {// A secret to use for key generation (you should set this explicitly)\n    // secret: 'INp8IvdIyeMcoGAgFGoA61DdBglwwSqnXJZkgz8PSnw',\n    // Set to true to use encryption (default: false)\n    // encryption: true,\n    // You can define your own encode/decode functions for signing and encryption\n    // if you want to override the default behaviour.\n    // encode: async ({ secret, token, maxAge }) => {},\n    // decode: async ({ secret, token, maxAge }) => {},\n  },\n  // You can define custom pages to override the built-in pages.\n  // The routes shown here are the default URLs that will be used when a custom\n  // pages is not specified for that route.\n  // https://next-auth.js.org/configuration/pages\n  pages: {// signIn: '/api/auth/signin',  // Displays signin buttons\n    // signOut: '/api/auth/signout', // Displays form with sign out button\n    // error: '/api/auth/error', // Error code passed in query string as ?error=\n    // verifyRequest: '/api/auth/verify-request', // Used for check email page\n    // newUser: null // If set, new users will be directed here on first sign in\n  },\n  // Callbacks are asynchronous functions you can use to control what happens\n  // when an action is performed.\n  // https://next-auth.js.org/configuration/callbacks\n  callbacks: {// signIn: async (user, account, profile) => { return Promise.resolve(true) },\n    // redirect: async (url, baseUrl) => { return Promise.resolve(baseUrl) },\n    // session: async (session, user) => { return Promise.resolve(session) },\n    // jwt: async (token, user, account, profile, isNewUser) => { return Promise.resolve(token) }\n  },\n  // Events are useful for logging\n  // https://next-auth.js.org/configuration/events\n  events: {},\n  // Enable debug messages in the console if you are having problems\n  debug: false\n};\nexport default ((req, res) => NextAuth(req, res, options));","map":{"version":3,"sources":["/Users/michaelpryor/Desktop/projects/giphtionary/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","options","providers","Okta","clientId","clientSecret","domain","Apple","process","env","APPLE_ID","appleId","teamId","APPLE_TEAM_ID","privateKey","APPLE_PRIVATE_KEY","keyId","APPLE_KEY_ID","Auth0","AUTH0_ID","AUTH0_SECRET","AUTH0_DOMAIN","Facebook","FACEBOOK_ID","FACEBOOK_SECRET","GitHub","GITHUB_ID","GITHUB_SECRET","Google","GOOGLE_ID","GOOGLE_SECRET","Twitter","TWITTER_ID","TWITTER_SECRET","database","DATABASE_URL","secret","SECRET","session","jwt","pages","callbacks","events","debug","req","res"],"mappings":"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","sourcesContent":["import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\n\n// For more information on each option (and a full list of options) go to\n// https://next-auth.js.org/configuration/options\nconst options = {\n  // https://next-auth.js.org/configuration/providers\n  providers: [\n    Providers.Okta({\n      clientId: \"0oao8x9b6t2PxbapM4x6\",\n      clientSecret: \"00wl7S8zevJFI3tefK8l-yqVPrbXGYIjzBnSopM1k\",\n      domain: \"https://dev-421964.okta.com/oauth2/default\",\n    }),\n    Providers.Apple({\n      clientId: process.env.APPLE_ID,\n      clientSecret: {\n        appleId: process.env.APPLE_ID,\n        teamId: process.env.APPLE_TEAM_ID,\n        privateKey: process.env.APPLE_PRIVATE_KEY,\n        keyId: process.env.APPLE_KEY_ID,\n      },\n    }),\n    Providers.Auth0({\n      clientId: process.env.AUTH0_ID,\n      clientSecret: process.env.AUTH0_SECRET,\n      domain: process.env.AUTH0_DOMAIN,\n    }),\n    Providers.Facebook({\n      clientId: process.env.FACEBOOK_ID,\n      clientSecret: process.env.FACEBOOK_SECRET,\n    }),\n    Providers.GitHub({\n      clientId: process.env.GITHUB_ID,\n      clientSecret: process.env.GITHUB_SECRET,\n    }),\n    Providers.Google({\n      clientId: process.env.GOOGLE_ID,\n      clientSecret: process.env.GOOGLE_SECRET,\n    }),\n    Providers.Twitter({\n      clientId: process.env.TWITTER_ID,\n      clientSecret: process.env.TWITTER_SECRET,\n    }),\n  ],\n  // Database optional. MySQL, Maria DB, Postgres and MongoDB are supported.\n  // https://next-auth.js.org/configuration/database\n  //\n  // Notes:\n  // * You must to install an appropriate node_module for your database\n  // * The Email provider requires a database (OAuth providers do not)\n  database:\n    process.env.DATABASE_URL ||\n    \"mongodb+srv://MichaelP:Stringbean86@project3.fwi9o.mongodb.net/<dbname>?retryWrites=true&w=majority\",\n\n  // The secret should be set to a reasonably long random string.\n  // It is used to sign cookies and to sign and encrypt JSON Web Tokens, unless\n  // a seperate secret is defined explicitly for encrypting the JWT.\n  secret: process.env.SECRET,\n\n  session: {\n    // Use JSON Web Tokens for session instead of database sessions.\n    // This option can be used with or without a database for users/accounts.\n    // Note: `jwt` is automatically set to `true` if no database is specified.\n    jwt: true,\n\n    // Seconds - How long until an idle session expires and is no longer valid.\n    // maxAge: 30 * 24 * 60 * 60, // 30 days\n\n    // Seconds - Throttle how frequently to write to database to extend a session.\n    // Use it to limit write operations. Set to 0 to always update the database.\n    // Note: This option is ignored if using JSON Web Tokens\n    // updateAge: 24 * 60 * 60, // 24 hours\n  },\n\n  // JSON Web tokens are only used for sessions if the `jwt: true` session\n  // option is set - or by default if no database is specified.\n  // https://next-auth.js.org/configuration/options#jwt\n  jwt: {\n    // A secret to use for key generation (you should set this explicitly)\n    // secret: 'INp8IvdIyeMcoGAgFGoA61DdBglwwSqnXJZkgz8PSnw',\n    // Set to true to use encryption (default: false)\n    // encryption: true,\n    // You can define your own encode/decode functions for signing and encryption\n    // if you want to override the default behaviour.\n    // encode: async ({ secret, token, maxAge }) => {},\n    // decode: async ({ secret, token, maxAge }) => {},\n  },\n\n  // You can define custom pages to override the built-in pages.\n  // The routes shown here are the default URLs that will be used when a custom\n  // pages is not specified for that route.\n  // https://next-auth.js.org/configuration/pages\n  pages: {\n    // signIn: '/api/auth/signin',  // Displays signin buttons\n    // signOut: '/api/auth/signout', // Displays form with sign out button\n    // error: '/api/auth/error', // Error code passed in query string as ?error=\n    // verifyRequest: '/api/auth/verify-request', // Used for check email page\n    // newUser: null // If set, new users will be directed here on first sign in\n  },\n\n  // Callbacks are asynchronous functions you can use to control what happens\n  // when an action is performed.\n  // https://next-auth.js.org/configuration/callbacks\n  callbacks: {\n    // signIn: async (user, account, profile) => { return Promise.resolve(true) },\n    // redirect: async (url, baseUrl) => { return Promise.resolve(baseUrl) },\n    // session: async (session, user) => { return Promise.resolve(session) },\n    // jwt: async (token, user, account, profile, isNewUser) => { return Promise.resolve(token) }\n  },\n\n  // Events are useful for logging\n  // https://next-auth.js.org/configuration/events\n  events: {},\n\n  // Enable debug messages in the console if you are having problems\n  debug: false,\n};\n\nexport default (req, res) => NextAuth(req, res, options);\n"]},"metadata":{},"sourceType":"module"}